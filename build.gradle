import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java-gradle-plugin'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    alias libs.plugins.gradleutils
    alias libs.plugins.gitversion
    alias libs.plugins.changelog
    alias libs.plugins.plugin.publish
    alias libs.plugins.shadow
    alias libs.plugins.licenser
}

gradleutils.displayName = 'Multi-Release Java'
description = 'Simple plugin to enable publishing a multi-release jar from subprojects or other sources.'
group = 'net.minecraftforge'
version = gitversion.tagOffset

println "Version: $version"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
    withJavadocJar()
}

gradleutils.pluginDevDefaults(configurations, libs.versions.gradle)

dependencies {
    // Static Analysis
    compileOnly libs.nulls

    // Gradle API
    compileOnly libs.gradle

    // GradleUtils Shared
    implementation libs.gradleutils.shared
}

license {
    header = rootProject.file('LICENSE-header.txt')
    newLine = false
    exclude '**/*.properties'
}

tasks.withType(Javadoc).configureEach {
    javadocTool = javaToolchains.javadocToolFor {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

tasks.named('jar', Jar) {
    archiveClassifier = 'thin'
}

tasks.named('shadowJar', ShadowJar) {
    enableAutoRelocation = true
    archiveClassifier = null
    relocationPrefix = 'net.minecraftforge.multi_release.gradle.internal.shadow'
}

changelog {
    from '0.1'
}

gradlePlugin {
    website = gitversion.url
    vcsUrl = gitversion.url + '.git'

    plugins.register('multi-release') {
        id = 'net.minecraftforge.multi-release'
        implementationClass = 'net.minecraftforge.multi_release.gradle.internal.MultiReleasePlugin'
        displayName = gradleutils.displayName.get()
        description = project.description
        tags = ['minecraftforge']
    }
}

publishing {
    repositories {
        maven gradleutils.publishingForgeMaven
    }

    publications.register('pluginMaven', MavenPublication) {
        changelog.publish(it)
        gradleutils.promote(it)

        pom { pom ->
            name = gradleutils.displayName
            description = project.description

            //gradleutils.pom.addRemoteDetails(pom)

            licenses {
                license gradleutils.pom.licenses.LGPLv2_1
            }

            developers {
                developer gradleutils.pom.developers.Jonathing
            }
        }
    }
}
